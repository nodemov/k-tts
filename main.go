package main

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	texttospeech "cloud.google.com/go/texttospeech/apiv1"
	"cloud.google.com/go/texttospeech/apiv1/texttospeechpb"
)

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
type TTSJob struct {
	ID         int
	FilePath   string
	OutputPath string
	Text       string
}

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
type TTSResult struct {
	Job     TTSJob
	Success bool
	Error   error
	Size    int64
}

// ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Translate TTS
func splitText(text string, maxLen int) []string {
	runes := []rune(text)
	if len(runes) <= maxLen {
		return []string{text}
	}

	var parts []string

	// ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ (‡∏à‡∏∏‡∏î, ‡∏≠‡∏±‡∏®‡πÄ‡∏à‡∏£‡∏µ‡∏¢‡πå, ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°)
	sentences := splitIntoSentences(text)

	// ‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
	currentPart := ""
	for _, sentence := range sentences {
		testPart := currentPart
		if testPart != "" {
			testPart += " "
		}
		testPart += sentence

		if len([]rune(testPart)) > maxLen && currentPart != "" {
			parts = append(parts, strings.TrimSpace(currentPart))
			currentPart = sentence
		} else {
			currentPart = testPart
		}
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
	if strings.TrimSpace(currentPart) != "" {
		parts = append(parts, strings.TrimSpace(currentPart))
	}

	// ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏Å‡∏ß‡πà‡∏≤
	var finalParts []string
	for _, part := range parts {
		if len([]rune(part)) <= maxLen {
			finalParts = append(finalParts, part)
		} else {
			// ‡πÅ‡∏ö‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
			subParts := splitLongText(part, maxLen)
			finalParts = append(finalParts, subParts...)
		}
	}

	return finalParts
}

// ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
func splitIntoSentences(text string) []string {
	var sentences []string
	runes := []rune(text)
	current := ""

	for i, r := range runes {
		current += string(r)

		// ‡∏à‡∏∏‡∏î‡∏à‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
		if r == '.' || r == '!' || r == '?' || r == '‡•§' || r == '|' {
			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (‡πÄ‡∏ä‡πà‡∏ô 3.14)
			isDecimal := false
			if r == '.' && i > 0 && i < len(runes)-1 {
				if isDigit(runes[i-1]) && isDigit(runes[i+1]) {
					isDecimal = true
				}
			}

			if !isDecimal {
				// ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
				if i+1 >= len(runes) || runes[i+1] == ' ' || runes[i+1] == '\n' {
					sentences = append(sentences, strings.TrimSpace(current))
					current = ""
				}
			}
		}
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
	if strings.TrimSpace(current) != "" {
		sentences = append(sentences, strings.TrimSpace(current))
	}

	return sentences
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func isDigit(r rune) bool {
	return r >= '0' && r <= '9'
}

// ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
func splitLongText(text string, maxLen int) []string {
	runes := []rune(text)
	var parts []string

	start := 0
	for start < len(runes) {
		end := start + maxLen
		if end > len(runes) {
			end = len(runes)
		}

		// ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
		if end < len(runes) {
			// ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
			bestBreak := findBestBreakPoint(runes, start, end)
			if bestBreak > start {
				end = bestBreak
			}
		}

		part := string(runes[start:end])
		parts = append(parts, strings.TrimSpace(part))
		start = end

		// ‡∏Ç‡πâ‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏´‡∏•‡∏∑‡∏≠
		for start < len(runes) && runes[start] == ' ' {
			start++
		}
	}

	return parts
}

// ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
func findBestBreakPoint(runes []rune, start, maxEnd int) int {
	// ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
	for i := maxEnd - 1; i > start; i-- {
		if runes[i] == ' ' {
			return i
		}
	}

	// ‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
	for i := maxEnd - 1; i > start; i-- {
		r := runes[i]
		if r == ',' || r == ';' || r == ':' || r == '(' || r == ')' ||
			r == '[' || r == ']' || r == '{' || r == '}' || r == '"' || r == '\'' {
			return i + 1 // ‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢
		}
	}

	// ‡∏´‡∏≤‡∏™‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
	for i := maxEnd - 1; i > start; i-- {
		r := runes[i]
		// ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ
		if isThaiVowel(r) || isThaiToneMarker(r) {
			// ‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå
			if i+1 < maxEnd {
				return i + 1
			}
		}
	}

	return maxEnd
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏£‡∏∞‡πÑ‡∏ó‡∏¢
func isThaiVowel(r rune) bool {
	return (r >= 0x0E30 && r <= 0x0E39) || // ‡∏™‡∏£‡∏∞
		(r >= 0x0E40 && r <= 0x0E44) || // ‡πÄ ‡πÅ ‡πÇ ‡πÉ ‡πÑ
		r == 0x0E2D || r == 0x0E2E // ‡∏≠ ‡∏Æ
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏£‡∏£‡∏ì‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÑ‡∏ó‡∏¢
func isThaiToneMarker(r rune) bool {
	return r >= 0x0E48 && r <= 0x0E4B // ‡πà ‡πâ ‡πä ‡πã
}

// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô
func cleanTextForTTS(text string) string {
	// ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
	specialChars := []string{
		"#", "*", "_", "~", "`", "^", "|", "\\", "/",
		"[", "]", "{", "}", "<", ">", "@", "$", "%",
		"&", "+", "=", "¬ß", "¬∂", "‚Ä†", "‚Ä°", "‚Ä¢", "‚Ä¶",
	}

	cleaned := text
	for _, char := range specialChars {
		cleaned = strings.ReplaceAll(cleaned, char, " ")
	}

	// ‡∏•‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏ó/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡πÄ‡∏ä‡πà‡∏ô "1" "2" "‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1")
	lines := strings.Split(cleaned, "\n")
	var filteredLines []string

	for _, line := range lines {
		trimmed := strings.TrimSpace(line)
		// ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ö‡∏ó‡∏ó‡∏µ‡πà X" ‡∏´‡∏£‡∏∑‡∏≠ "Chapter X"
		if trimmed == "" ||
			regexp.MustCompile(`^(\d+|‡∏ö‡∏ó‡∏ó‡∏µ‡πà\s*\d+|Chapter\s*\d+)$`).MatchString(trimmed) {
			continue
		}
		filteredLines = append(filteredLines, line)
	}

	cleaned = strings.Join(filteredLines, "\n")

	// ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
	cleaned = regexp.MustCompile(`\s+`).ReplaceAllString(cleaned, " ")

	return strings.TrimSpace(cleaned)
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á folder
func ensureDir(path string) error {
	if _, err := os.Stat(path); os.IsNotExist(err) {
		return os.MkdirAll(path, 0755)
	}
	return nil
}

// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô folder temp
func cleanTempFolder(tempDir string) {
	files, err := filepath.Glob(filepath.Join(tempDir, "*"))
	if err != nil {
		return
	}
	for _, file := range files {
		os.Remove(file)
	}
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ù‡∏±‡∏á‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ (Natural Sorting)
func sortFilesNaturally(files []string) {
	// ‡πÉ‡∏ä‡πâ regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå temp_part_*.mp3
	re := regexp.MustCompile(`temp_part_(\d+)\.mp3`)

	sort.Slice(files, func(i, j int) bool {
		// ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå i
		matchI := re.FindStringSubmatch(filepath.Base(files[i]))
		numI := 0
		if len(matchI) > 1 {
			numI, _ = strconv.Atoi(matchI[1])
		}

		// ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå j
		matchJ := re.FindStringSubmatch(filepath.Base(files[j]))
		numJ := 0
		if len(matchJ) > 1 {
			numJ, _ = strconv.Atoi(matchJ[1])
		}

		return numI < numJ
	})
}

// ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ ffmpeg
func combineAudioFiles(tempDir, outputFile string) error {
	// ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå temp_part_*.mp3 ‡πÉ‡∏ô tempDir
	pattern := filepath.Join(tempDir, "temp_part_*.mp3")
	files, err := filepath.Glob(pattern)
	if err != nil || len(files) == 0 {
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô %s", tempDir)
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö natural sorting (1, 2, 3, ..., 10, 11, 12 ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 1, 10, 11, 12, 2, 3)
	sortFilesNaturally(files)

	// ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏ß‡∏°
	fmt.Println("üìã ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏ß‡∏°:")
	for i, file := range files {
		fmt.Printf("   %d. %s\n", i+1, filepath.Base(file))
	}

	if len(files) == 1 {
		// ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á output
		data, err := os.ReadFile(files[0])
		if err != nil {
			return err
		}
		return os.WriteFile(outputFile, data, 0644)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ffmpeg (‡πÉ‡∏ä‡πâ relative path ‡∏à‡∏≤‡∏Å tempDir)
	filelistPath := filepath.Join(tempDir, "filelist.txt")
	var filelistContent strings.Builder
	for _, file := range files {
		// ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (relative path)
		filename := filepath.Base(file)
		filelistContent.WriteString(fmt.Sprintf("file '%s'\n", filename))
	}

	err = os.WriteFile(filelistPath, []byte(filelistContent.String()), 0644)
	if err != nil {
		return err
	}

	// ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ffmpeg ‡∏à‡∏≤‡∏Å tempDir ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ absolute path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö output
	absOutputFile, err := filepath.Abs(outputFile)
	if err != nil {
		return err
	}

	// ‡πÉ‡∏ä‡πâ high-quality encoding parameters
	cmd := exec.Command("ffmpeg",
		"-f", "concat",
		"-safe", "0",
		"-i", "filelist.txt",
		"-c:a", "libmp3lame", // ‡πÉ‡∏ä‡πâ LAME MP3 encoder ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
		"-b:a", "320k", // Bitrate 320kbps (‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
		"-ar", "48000", // Sample rate 48kHz
		"-ac", "2", // Stereo
		"-af", "volume=1.2,dynaudnorm=p=0.9:s=5", // ‡∏õ‡∏£‡∏±‡∏ö volume ‡πÅ‡∏•‡∏∞ normalize
		absOutputFile,
		"-y")

	cmd.Dir = tempDir
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("ffmpeg error: %v\nOutput: %s", err, string(output))
	}

	// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	os.Remove(filelistPath)

	return nil
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ ffmpeg
func adjustAudioSpeed(inputFile, outputFile string, speed float64) error {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå temp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
	tempFile := inputFile + ".temp.mp3"

	fmt.Printf("‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏õ‡πá‡∏ô %.1fx...\n", speed)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á atempo filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á (‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡πÜ ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô 2.0)
	var audioFilter string
	if speed <= 2.0 {
		audioFilter = fmt.Sprintf("atempo=%.2f,dynaudnorm=p=0.9:s=5", speed)
	} else {
		// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 2.0 ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ atempo ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
		// ‡πÄ‡∏ä‡πà‡∏ô 2.4x = 1.5 * 1.6
		firstStep := 1.5
		secondStep := speed / firstStep
		if secondStep > 2.0 {
			// ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 2.0 ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏Ç‡∏±‡πâ‡∏ô
			firstStep = 1.4
			secondStep = 1.5
			thirdStep := speed / (firstStep * secondStep)
			audioFilter = fmt.Sprintf("atempo=%.2f,atempo=%.2f,atempo=%.2f,dynaudnorm=p=0.9:s=5", firstStep, secondStep, thirdStep)
		} else {
			audioFilter = fmt.Sprintf("atempo=%.2f,atempo=%.2f,dynaudnorm=p=0.9:s=5", firstStep, secondStep)
		}
	}

	// ‡πÉ‡∏ä‡πâ high-quality speed adjustment
	cmd := exec.Command("ffmpeg",
		"-i", inputFile,
		"-af", audioFilter, // ‡∏£‡∏ß‡∏° atempo ‡πÅ‡∏•‡∏∞ dynaudnorm ‡πÉ‡∏ô filter ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
		"-c:a", "libmp3lame", // High-quality MP3 encoder
		"-b:a", "320k", // Maximum bitrate
		"-ar", "48000", // High sample rate
		"-ac", "2", // Stereo
		tempFile,
		"-y")

	output, err := cmd.CombinedOutput()
	if err != nil {
		// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
		os.Remove(tempFile)
		return fmt.Errorf("ffmpeg speed adjustment error: %v\nOutput: %s", err, string(output))
	}

	// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡πâ‡∏ß
	err = os.Rename(tempFile, outputFile)
	if err != nil {
		os.Remove(tempFile)
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: %v", err)
	}

	return nil
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö post-processing ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
func enhanceAudioQuality(inputFile, outputFile string) error {
	fmt.Println("üéõÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")

	cmd := exec.Command("ffmpeg",
		"-i", inputFile,
		"-c:a", "libmp3lame",
		"-b:a", "320k",
		"-ar", "48000",
		"-ac", "2",
		"-af", "highpass=f=80,lowpass=f=15000,dynaudnorm=p=0.9:s=5:m=15,volume=1.1", // Filter chain ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
		outputFile,
		"-y")

	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("ffmpeg enhancement error: %v\nOutput: %s", err, string(output))
	}

	return nil
}

// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ Google Translate TTS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multi-worker
func processFileWithGoogleTTSWorker(job TTSJob, workerTempDir string) ([]string, error) {
	fmt.Printf("üîÑ Worker ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: %s\n", filepath.Base(job.FilePath))

	// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
	cleanedText := cleanTextForTTS(job.Text)
	if cleanedText == "" {
		return nil, fmt.Errorf("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
	}

	// ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
	parts := splitText(cleanedText, 150)
	fmt.Printf("üìë ‡πÑ‡∏ü‡∏•‡πå %s ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô %d ‡∏™‡πà‡∏ß‡∏ô\n", filepath.Base(job.FilePath), len(parts))

	var audioFiles []string

	for i, part := range parts {
		fmt.Printf("üéµ Worker ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á %s ‡∏™‡πà‡∏ß‡∏ô %d/%d...\n", filepath.Base(job.FilePath), i+1, len(parts))

		// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ URL
		encodedText := url.QueryEscape(part)
		ttsURL := fmt.Sprintf("https://translate.google.com/translate_tts?ie=UTF-8&tl=th&client=tw-ob&q=%s", encodedText)

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP request ‡∏û‡∏£‡πâ‡∏≠‡∏° headers
		req, err := http.NewRequest("GET", ttsURL, nil)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è Worker: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á request %s ‡∏™‡πà‡∏ß‡∏ô %d: %s\n", filepath.Base(job.FilePath), i+1, err.Error())
			continue
		}

		// ‡πÄ‡∏û‡∏¥‡πà‡∏° headers ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
		req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
		req.Header.Set("Referer", "https://translate.google.com/")

		// ‡∏™‡πà‡∏á request
		client := &http.Client{Timeout: 30 * time.Second}
		resp, err := client.Do(req)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è Worker: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á %s ‡∏™‡πà‡∏ß‡∏ô %d: %s\n", filepath.Base(job.FilePath), i+1, err.Error())
			continue
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status code
		if resp.StatusCode != 200 {
			fmt.Printf("‚ö†Ô∏è Worker: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö status code %d ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö %s ‡∏™‡πà‡∏ß‡∏ô %d\n", resp.StatusCode, filepath.Base(job.FilePath), i+1)
			resp.Body.Close()
			continue
		}

		// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á
		audioData, err := io.ReadAll(resp.Body)
		resp.Body.Close()
		if err != nil {
			fmt.Printf("‚ö†Ô∏è Worker: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á %s ‡∏™‡πà‡∏ß‡∏ô %d: %s\n", filepath.Base(job.FilePath), i+1, err.Error())
			continue
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ
		if len(audioData) < 1000 || strings.Contains(string(audioData[:100]), "<html") {
			fmt.Printf("‚ö†Ô∏è Worker: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö %s ‡∏™‡πà‡∏ß‡∏ô %d\n", filepath.Base(job.FilePath), i+1)
			continue
		}

		// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô workerTempDir
		tempFilename := filepath.Join(workerTempDir, fmt.Sprintf("temp_part_%d.mp3", i+1))
		err = os.WriteFile(tempFilename, audioData, 0644)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è Worker: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå %s ‡∏™‡πà‡∏ß‡∏ô %d: %s\n", filepath.Base(job.FilePath), i+1, err.Error())
			continue
		}

		audioFiles = append(audioFiles, tempFilename)
		fmt.Printf("‚úÖ Worker: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å %s ‡∏™‡πà‡∏ß‡∏ô %d ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%.1f KB)\n", filepath.Base(job.FilePath), i+1, float64(len(audioData))/1024)

		// ‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å rate limit
		time.Sleep(800 * time.Millisecond)
	}

	return audioFiles, nil
}

// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ Google Cloud TTS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multi-worker
func processFileWithCloudTTSWorker(client *texttospeech.Client, ctx context.Context, job TTSJob) error {
	fmt.Printf("üîÑ Worker ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: %s ‡∏î‡πâ‡∏ß‡∏¢ Google Cloud TTS\n", filepath.Base(job.FilePath))

	// ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
	cleanedText := cleanTextForTTS(job.Text)
	if cleanedText == "" {
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á request
	req := &texttospeechpb.SynthesizeSpeechRequest{
		Input: &texttospeechpb.SynthesisInput{
			InputSource: &texttospeechpb.SynthesisInput_Text{Text: cleanedText},
		},
		Voice: &texttospeechpb.VoiceSelectionParams{
			LanguageCode: "th-TH",
			Name:         "th-TH-Neural2-C",
			SsmlGender:   texttospeechpb.SsmlVoiceGender_FEMALE,
		},
		AudioConfig: &texttospeechpb.AudioConfig{
			AudioEncoding:   texttospeechpb.AudioEncoding_MP3,
			SampleRateHertz: 48000,
			SpeakingRate:    1.0,
			Pitch:           0.0,
			VolumeGainDb:    2.0,
		},
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
	fmt.Printf("üéôÔ∏è Worker ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á %s ‡∏î‡πâ‡∏ß‡∏¢ Google Cloud TTS...\n", filepath.Base(job.FilePath))
	resp, err := client.SynthesizeSpeech(ctx, req)
	if err != nil {
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
	tempFile := job.OutputPath + ".temp.mp3"
	err = os.WriteFile(tempFile, resp.AudioContent, 0644)
	if err != nil {
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÑ‡∏î‡πâ: %v", err)
	}

	// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á
	err = enhanceAudioQuality(tempFile, job.OutputPath)
	if err != nil {
		os.Remove(tempFile)
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}

	// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
	os.Remove(tempFile)
	return nil
}

// TTS Worker function
func ttsWorker(workerID int, jobs <-chan TTSJob, results chan<- TTSResult, client *texttospeech.Client, ctx context.Context, useCloudTTS bool, audioSpeed float64) {
	fmt.Printf("üöÄ Worker %d ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n", workerID)

	for job := range jobs {
		fmt.Printf("üë∑ Worker %d ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô: %s\n", workerID, filepath.Base(job.FilePath))

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á temp directory ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö worker ‡∏ô‡∏µ‡πâ
		workerTempDir := filepath.Join("output", fmt.Sprintf("temp_worker_%d", workerID))
		err := ensureDir(workerTempDir)
		if err != nil {
			results <- TTSResult{Job: job, Success: false, Error: fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á temp directory: %v", err)}
			continue
		}

		var processingError error

		if useCloudTTS && client != nil {
			// ‡πÉ‡∏ä‡πâ Google Cloud TTS
			err = processFileWithCloudTTSWorker(client, ctx, job)
			if err != nil {
				fmt.Printf("‚ùå Worker %d: Google Cloud TTS ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: %s\n", workerID, err.Error())
				// fallback ‡πÑ‡∏õ Google Translate TTS
				audioFiles, err2 := processFileWithGoogleTTSWorker(job, workerTempDir)
				if err2 != nil || len(audioFiles) == 0 {
					processingError = fmt.Errorf("cloud TTS ‡πÅ‡∏•‡∏∞ Translate TTS ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà: %v, %v", err, err2)
				} else {
					// ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
					err = combineAudioFiles(workerTempDir, job.OutputPath)
					if err != nil {
						processingError = fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: %v", err)
					}
				}
			}

			// ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloud TTS
			if processingError == nil {
				tempSpeedFile := job.OutputPath + ".speed.mp3"
				err = adjustAudioSpeed(job.OutputPath, tempSpeedFile, audioSpeed)
				if err == nil {
					os.Rename(tempSpeedFile, job.OutputPath)
					fmt.Printf("‚ö° Worker %d: ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (%.1fx)\n", workerID, audioSpeed)
				} else {
					fmt.Printf("‚ö†Ô∏è Worker %d: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏î‡πâ: %s\n", workerID, err.Error())
				}
			}
		} else {
			// ‡πÉ‡∏ä‡πâ Google Translate TTS
			audioFiles, err := processFileWithGoogleTTSWorker(job, workerTempDir)
			if err != nil || len(audioFiles) == 0 {
				processingError = fmt.Errorf("google Translate TTS ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: %v", err)
			} else {
				// ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
				fmt.Printf("üîó Worker %d: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á %s...\n", workerID, filepath.Base(job.FilePath))
				err = combineAudioFiles(workerTempDir, job.OutputPath)
				if err != nil {
					processingError = fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: %v", err)
				} else {
					// ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
					err = adjustAudioSpeed(job.OutputPath, job.OutputPath, audioSpeed)
					if err != nil {
						fmt.Printf("‚ö†Ô∏è Worker %d: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏î‡πâ: %s\n", workerID, err.Error())
					} else {
						fmt.Printf("‚ö° Worker %d: ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (%.1fx)\n", workerID, audioSpeed)
					}
				}
			}
		}

		// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡∏Ç‡∏≠‡∏á worker ‡∏ô‡∏µ‡πâ
		cleanTempFolder(workerTempDir)
		os.Remove(workerTempDir)

		// ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
		var fileSize int64 = 0
		if processingError == nil {
			if info, err := os.Stat(job.OutputPath); err == nil {
				fileSize = info.Size()
				fmt.Printf("‚úÖ Worker %d: ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô %s (%.1f KB)\n", workerID, filepath.Base(job.FilePath), float64(fileSize)/1024)
			}
		} else {
			fmt.Printf("‚ùå Worker %d: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß %s: %s\n", workerID, filepath.Base(job.FilePath), processingError.Error())
		}

		results <- TTSResult{
			Job:     job,
			Success: processingError == nil,
			Error:   processingError,
			Size:    fileSize,
		}
	}

	fmt.Printf("üèÅ Worker %d ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô\n", workerID)
}

func main() {
	// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (1.0 = ‡∏õ‡∏Å‡∏ï‡∏¥, 1.3 = ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 30%, 1.4 = ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô 40%)
	const AUDIO_SPEED_MULTIPLIER = 1.6
	// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô workers (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
	const NUM_WORKERS = 4

	fmt.Printf("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Multi-Worker TTS (%d workers)\n", NUM_WORKERS)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á folders ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
	outputDir := "output"
	err := ensureDir(outputDir)
	if err != nil {
		panic("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á output folder: " + err.Error())
	}

	// ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô chapters
	chaptersDir := "chapters"
	pattern := filepath.Join(chaptersDir, "*.txt")
	files, err := filepath.Glob(pattern)
	if err != nil || len(files) == 0 {
		panic("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .txt ‡πÉ‡∏ô folder chapters")
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
	sort.Strings(files)

	fmt.Printf("üìö ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• %d ‡πÑ‡∏ü‡∏•‡πå:\n", len(files))
	for i, file := range files {
		fmt.Printf("   %d. %s\n", i+1, filepath.Base(file))
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Cloud TTS
	ctx := context.Background()
	client, err := texttospeech.NewClient(ctx)
	useCloudTTS := (err == nil)
	if useCloudTTS {
		defer client.Close()
		fmt.Println("‚úÖ ‡πÉ‡∏ä‡πâ Google Cloud TTS")
	} else {
		fmt.Println("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Cloud TTS, ‡πÉ‡∏ä‡πâ Google Translate TTS ‡πÅ‡∏ó‡∏ô")
	}

	// ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á jobs
	var jobs []TTSJob
	for i, file := range files {
		// ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå
		data, err := os.ReadFile(file)
		if err != nil {
			fmt.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå %s: %s\n", file, err.Error())
			continue
		}

		text := strings.TrimSpace(string(data))
		if text == "" {
			fmt.Printf("‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå %s ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤\n", file)
			continue
		}

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå output
		baseName := strings.TrimSuffix(filepath.Base(file), ".txt")
		outputFile := filepath.Join(outputDir, baseName+".mp3")

		job := TTSJob{
			ID:         i + 1,
			FilePath:   file,
			OutputPath: outputFile,
			Text:       text,
		}
		jobs = append(jobs, job)
	}

	if len(jobs) == 0 {
		fmt.Println("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ")
		return
	}

	fmt.Printf("üéØ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• %d ‡∏á‡∏≤‡∏ô ‡∏î‡πâ‡∏ß‡∏¢ %d workers\n", len(jobs), NUM_WORKERS)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á channels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô
	jobsChan := make(chan TTSJob, len(jobs))
	resultsChan := make(chan TTSResult, len(jobs))

	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô workers
	var wg sync.WaitGroup
	for workerID := 1; workerID <= NUM_WORKERS; workerID++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()
			ttsWorker(id, jobsChan, resultsChan, client, ctx, useCloudTTS, AUDIO_SPEED_MULTIPLIER)
		}(workerID)
	}

	// ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á channel
	startTime := time.Now()
	for _, job := range jobs {
		jobsChan <- job
	}
	close(jobsChan)

	// ‡∏£‡∏≠‡πÉ‡∏´‡πâ workers ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
	go func() {
		wg.Wait()
		close(resultsChan)
	}()

	// ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
	var results []TTSResult
	var successCount, failCount int
	var totalSize int64

	fmt.Println("\nüìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...")
	for result := range resultsChan {
		results = append(results, result)
		if result.Success {
			successCount++
			totalSize += result.Size
			fmt.Printf("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: %s (%.1f KB)\n",
				filepath.Base(result.Job.FilePath),
				float64(result.Size)/1024)
		} else {
			failCount++
			fmt.Printf("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: %s - %s\n",
				filepath.Base(result.Job.FilePath),
				result.Error.Error())
		}
	}

	duration := time.Since(startTime)

	// ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
	fmt.Printf("\nüéâ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!\n")
	fmt.Printf("‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: %.1f ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n", duration.Seconds())
	fmt.Printf("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %d ‡πÑ‡∏ü‡∏•‡πå\n", successCount)
	fmt.Printf("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: %d ‡πÑ‡∏ü‡∏•‡πå\n", failCount)
	fmt.Printf("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô folder: %s\n", outputDir)
	fmt.Printf("üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°: %.1f MB\n", float64(totalSize)/(1024*1024))

	// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
	if successCount > 0 {
		fmt.Println("\nüìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô:")
		outputPattern := filepath.Join(outputDir, "*.mp3")
		outputFiles, err := filepath.Glob(outputPattern)
		if err == nil && len(outputFiles) > 0 {
			sort.Strings(outputFiles)
			for i, file := range outputFiles {
				if info, err := os.Stat(file); err == nil {
					fmt.Printf("   %d. %s (%.1f KB)\n", i+1, filepath.Base(file), float64(info.Size())/1024)
				}
			}
		}
	}

	if failCount > 0 {
		fmt.Println("\n‚ö†Ô∏è  ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:")
		for _, result := range results {
			if !result.Success {
				fmt.Printf("   - %s: %s\n", filepath.Base(result.Job.FilePath), result.Error.Error())
			}
		}
	}

	fmt.Printf("\nüèÅ Multi-Worker TTS ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n")
}
