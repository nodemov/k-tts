package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	texttospeech "cloud.google.com/go/texttospeech/apiv1"
	"cloud.google.com/go/texttospeech/apiv1/texttospeechpb"
)

// ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Translate TTS
func splitText(text string, maxLen int) []string {
	runes := []rune(text)
	if len(runes) <= maxLen {
		return []string{text}
	}

	var parts []string

	// ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ (‡∏à‡∏∏‡∏î, ‡∏≠‡∏±‡∏®‡πÄ‡∏à‡∏£‡∏µ‡∏¢‡πå, ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°)
	sentences := []string{}
	current := ""

	for i, r := range runes {
		current += string(r)
		if r == '.' || r == '!' || r == '?' || r == '‡•§' {
			// ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
			if i+1 < len(runes) && runes[i+1] == ' ' {
				sentences = append(sentences, strings.TrimSpace(current))
				current = ""
			}
		}
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
	if strings.TrimSpace(current) != "" {
		sentences = append(sentences, strings.TrimSpace(current))
	}

	// ‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î
	currentPart := ""
	for _, sentence := range sentences {
		testPart := currentPart
		if testPart != "" {
			testPart += " "
		}
		testPart += sentence

		if len([]rune(testPart)) > maxLen && currentPart != "" {
			parts = append(parts, strings.TrimSpace(currentPart))
			currentPart = sentence
		} else {
			currentPart = testPart
		}
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
	if strings.TrimSpace(currentPart) != "" {
		parts = append(parts, strings.TrimSpace(currentPart))
	}

	// ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡πà‡∏≠
	var finalParts []string
	for _, part := range parts {
		if len([]rune(part)) <= maxLen {
			finalParts = append(finalParts, part)
		} else {
			// ‡πÅ‡∏ö‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞
			partRunes := []rune(part)
			for i := 0; i < len(partRunes); i += maxLen {
				end := i + maxLen
				if end > len(partRunes) {
					end = len(partRunes)
				}
				finalParts = append(finalParts, string(partRunes[i:end]))
			}
		}
	}

	return finalParts
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á folder
func ensureDir(path string) error {
	if _, err := os.Stat(path); os.IsNotExist(err) {
		return os.MkdirAll(path, 0755)
	}
	return nil
}

// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô folder temp
func cleanTempFolder(tempDir string) {
	files, err := filepath.Glob(filepath.Join(tempDir, "*"))
	if err != nil {
		return
	}
	for _, file := range files {
		os.Remove(file)
	}
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ù‡∏±‡∏á‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ (Natural Sorting)
func sortFilesNaturally(files []string) {
	// ‡πÉ‡∏ä‡πâ regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå temp_part_*.mp3
	re := regexp.MustCompile(`temp_part_(\d+)\.mp3`)

	sort.Slice(files, func(i, j int) bool {
		// ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå i
		matchI := re.FindStringSubmatch(filepath.Base(files[i]))
		numI := 0
		if len(matchI) > 1 {
			numI, _ = strconv.Atoi(matchI[1])
		}

		// ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå j
		matchJ := re.FindStringSubmatch(filepath.Base(files[j]))
		numJ := 0
		if len(matchJ) > 1 {
			numJ, _ = strconv.Atoi(matchJ[1])
		}

		return numI < numJ
	})
}

// ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ ffmpeg
func combineAudioFiles(tempDir, outputFile string) error {
	// ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå temp_part_*.mp3 ‡πÉ‡∏ô tempDir
	pattern := filepath.Join(tempDir, "temp_part_*.mp3")
	files, err := filepath.Glob(pattern)
	if err != nil || len(files) == 0 {
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô %s", tempDir)
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö natural sorting (1, 2, 3, ..., 10, 11, 12 ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 1, 10, 11, 12, 2, 3)
	sortFilesNaturally(files)

	// ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏ß‡∏°
	fmt.Println("üìã ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏ß‡∏°:")
	for i, file := range files {
		fmt.Printf("   %d. %s\n", i+1, filepath.Base(file))
	}

	if len(files) == 1 {
		// ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á output
		data, err := ioutil.ReadFile(files[0])
		if err != nil {
			return err
		}
		return ioutil.WriteFile(outputFile, data, 0644)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ffmpeg (‡πÉ‡∏ä‡πâ relative path ‡∏à‡∏≤‡∏Å tempDir)
	filelistPath := filepath.Join(tempDir, "filelist.txt")
	var filelistContent strings.Builder
	for _, file := range files {
		// ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (relative path)
		filename := filepath.Base(file)
		filelistContent.WriteString(fmt.Sprintf("file '%s'\n", filename))
	}

	err = ioutil.WriteFile(filelistPath, []byte(filelistContent.String()), 0644)
	if err != nil {
		return err
	}

	// ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ffmpeg ‡∏à‡∏≤‡∏Å tempDir ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ absolute path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö output
	absOutputFile, err := filepath.Abs(outputFile)
	if err != nil {
		return err
	}

	cmd := exec.Command("ffmpeg", "-f", "concat", "-safe", "0", "-i", "filelist.txt", "-c", "copy", absOutputFile, "-y")
	cmd.Dir = tempDir
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("ffmpeg error: %v\nOutput: %s", err, string(output))
	}

	// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	os.Remove(filelistPath)

	return nil
}

// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ Google Translate TTS
func processFileWithGoogleTTS(filename, text, tempDir string) ([]string, error) {
	fmt.Printf("üîÑ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: %s\n", filename)

	// ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢
	parts := splitText(text, 80)
	fmt.Printf("üìë ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô %d ‡∏™‡πà‡∏ß‡∏ô\n", len(parts))

	var audioFiles []string

	for i, part := range parts {
		fmt.Printf("üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà %d/%d...\n", i+1, len(parts))

		// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ URL
		encodedText := url.QueryEscape(part)
		ttsURL := fmt.Sprintf("https://translate.google.com/translate_tts?ie=UTF-8&tl=th&client=tw-ob&q=%s", encodedText)

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP request ‡∏û‡∏£‡πâ‡∏≠‡∏° headers
		req, err := http.NewRequest("GET", ttsURL, nil)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á request ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà %d: %s\n", i+1, err.Error())
			continue
		}

		// ‡πÄ‡∏û‡∏¥‡πà‡∏° headers ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
		req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
		req.Header.Set("Referer", "https://translate.google.com/")

		// ‡∏™‡πà‡∏á request
		client := &http.Client{Timeout: 30 * time.Second}
		resp, err := client.Do(req)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà %d: %s\n", i+1, err.Error())
			continue
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö status code
		if resp.StatusCode != 200 {
			fmt.Printf("‚ö†Ô∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö status code %d ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà %d\n", resp.StatusCode, i+1)
			resp.Body.Close()
			continue
		}

		// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á
		audioData, err := ioutil.ReadAll(resp.Body)
		resp.Body.Close()
		if err != nil {
			fmt.Printf("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà %d: %s\n", i+1, err.Error())
			continue
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ
		if len(audioData) < 1000 || strings.Contains(string(audioData[:100]), "<html") {
			fmt.Printf("‚ö†Ô∏è ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà %d\n", i+1)
			continue
		}

		// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏ô tempDir
		tempFilename := filepath.Join(tempDir, fmt.Sprintf("temp_part_%d.mp3", i+1))
		err = ioutil.WriteFile(tempFilename, audioData, 0644)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà %d: %s\n", i+1, err.Error())
			continue
		}

		audioFiles = append(audioFiles, tempFilename)
		fmt.Printf("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà %d ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (%.1f KB)\n", i+1, float64(len(audioData))/1024)

		// ‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
		time.Sleep(1 * time.Second)
	}

	return audioFiles, nil
}

// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ Google Cloud TTS
func processFileWithCloudTTS(client *texttospeech.Client, ctx context.Context, filename, text, outputPath string) error {
	fmt.Printf("üîÑ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: %s ‡∏î‡πâ‡∏ß‡∏¢ Google Cloud TTS\n", filename)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á request
	req := &texttospeechpb.SynthesizeSpeechRequest{
		Input: &texttospeechpb.SynthesisInput{
			InputSource: &texttospeechpb.SynthesisInput_Text{Text: text},
		},
		Voice: &texttospeechpb.VoiceSelectionParams{
			LanguageCode: "th-TH",
			Name:         "th-TH-Neural2-C",
			SsmlGender:   texttospeechpb.SsmlVoiceGender_FEMALE,
		},
		AudioConfig: &texttospeechpb.AudioConfig{
			AudioEncoding: texttospeechpb.AudioEncoding_MP3,
			SpeakingRate:  1.5,
			Pitch:         0.0,
			VolumeGainDb:  0.0,
		},
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
	fmt.Println("üéôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ Google Cloud TTS...")
	resp, err := client.SynthesizeSpeech(ctx, req)
	if err != nil {
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
	err = ioutil.WriteFile(outputPath, resp.AudioContent, 0644)
	if err != nil {
		return fmt.Errorf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: %v", err)
	}

	return nil
}

func main() {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á folders ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
	outputDir := "output"
	tempDir := filepath.Join(outputDir, "temp")

	err := ensureDir(outputDir)
	if err != nil {
		panic("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á output folder: " + err.Error())
	}

	err = ensureDir(tempDir)
	if err != nil {
		panic("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á temp folder: " + err.Error())
	}

	// ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô chapters
	chaptersDir := "chapters"
	pattern := filepath.Join(chaptersDir, "*.txt")
	files, err := filepath.Glob(pattern)
	if err != nil || len(files) == 0 {
		panic("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .txt ‡πÉ‡∏ô folder chapters")
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
	sort.Strings(files)

	fmt.Printf("üìö ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• %d ‡πÑ‡∏ü‡∏•‡πå:\n", len(files))
	for i, file := range files {
		fmt.Printf("   %d. %s\n", i+1, filepath.Base(file))
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Cloud TTS
	ctx := context.Background()
	client, err := texttospeech.NewClient(ctx)
	useCloudTTS := (err == nil)
	if useCloudTTS {
		defer client.Close()
		fmt.Println("‚úÖ ‡πÉ‡∏ä‡πâ Google Cloud TTS")
	} else {
		fmt.Println("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Cloud TTS, ‡πÉ‡∏ä‡πâ Google Translate TTS ‡πÅ‡∏ó‡∏ô")
	}

	// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
	for i, file := range files {
		fmt.Printf("\nüéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå %d/%d: %s\n", i+1, len(files), filepath.Base(file))

		// ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå
		data, err := os.ReadFile(file)
		if err != nil {
			fmt.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå %s: %s\n", file, err.Error())
			continue
		}

		text := strings.TrimSpace(string(data))
		if text == "" {
			fmt.Printf("‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå %s ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤\n", file)
			continue
		}

		fmt.Printf("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏±‡∏Å‡∏©‡∏£: %d\n", len([]rune(text)))

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå output
		baseName := strings.TrimSuffix(filepath.Base(file), ".txt")
		outputFile := filepath.Join(outputDir, baseName+".mp3")

		if useCloudTTS {
			// ‡πÉ‡∏ä‡πâ Google Cloud TTS
			err = processFileWithCloudTTS(client, ctx, baseName, text, outputFile)
			if err != nil {
				fmt.Printf("‚ùå Google Cloud TTS ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: %s\n", err.Error())
				fmt.Println("üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Google Translate TTS...")
				useCloudTTS = false
			} else {
				if info, err := os.Stat(outputFile); err == nil {
					fmt.Printf("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‚Üí %s (%.1f KB)\n", outputFile, float64(info.Size())/1024)
				}
				continue
			}
		}

		if !useCloudTTS {
			// ‡πÉ‡∏ä‡πâ Google Translate TTS
			audioFiles, err := processFileWithGoogleTTS(baseName, text, tempDir)
			if err != nil || len(audioFiles) == 0 {
				fmt.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• %s ‡πÑ‡∏î‡πâ\n", file)
				continue
			}

			// ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
			fmt.Println("üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
			err = combineAudioFiles(tempDir, outputFile)
			if err != nil {
				fmt.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: %s\n", err.Error())
				continue
			}

			// ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
			if info, err := os.Stat(outputFile); err == nil {
				fmt.Printf("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‚Üí %s (%.1f KB)\n", outputFile, float64(info.Size())/1024)
			}

			// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp
			fmt.Println("üóëÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß...")
			cleanTempFolder(tempDir)
		}
	}

	fmt.Printf("\nüéâ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!\n")
	fmt.Printf("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô folder: %s\n", outputDir)

	// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
	outputPattern := filepath.Join(outputDir, "*.mp3")
	outputFiles, err := filepath.Glob(outputPattern)
	if err == nil && len(outputFiles) > 0 {
		fmt.Println("üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô:")
		for i, file := range outputFiles {
			if info, err := os.Stat(file); err == nil {
				fmt.Printf("   %d. %s (%.1f KB)\n", i+1, filepath.Base(file), float64(info.Size())/1024)
			}
		}
	}
}
